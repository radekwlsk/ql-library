schema {
  query: Query
  mutation: Mutation
}

input AuthorFilter {
  id: ID
  name: String
  countryName: String
}

type AuthorType {
  id: ID!
  name: String!
  birthday: Date
  country: CountryType
  books(category: BookCategory, language: BookLanguage): [BookType]
}

enum BookCategory {
  FANTASY
  NOVEL
  COOKBOOK
  BIOGRAPHY
}

input BookCreateInput {
  authorId: ID!
  title: String!
  category: BookCategory
  language: BookLanguage = EN
  pages: Int
}

input BookFilter {
  id: ID
  authorId: ID
  title: String
  category: BookCategory
  language: BookLanguage
}

enum BookLanguage {
  EN
  PL
  FR
  DE
}

type BookType {
  id: ID!
  author: AuthorType!
  title: String!
  language: BookLanguage!
  pages: Int
  category: BookCategory
}

input BookUpdateInput {
  authorId: ID
  title: String
  category: BookCategory
  language: BookLanguage
  pages: Int
}

type CountryType {
  name: String
}

scalar Date

scalar DateTime

type Mutation {
  createBook(data: BookCreateInput!): BookType
  updateBooks(data: BookUpdateInput!, filters: BookFilter): [BookType!]
}

type Query {
  author(id: ID!): AuthorType
  authors(filters: AuthorFilter): [AuthorType!]
  book(id: ID!): BookType
  books(filters: BookFilter): [BookType!]
  user(id: ID!): UserType
  users(filters: UserFilter): [UserType!]
}

input UserFilter {
  id: ID
  username: String
}

type UserType {
  id: ID!
  username: String!
  email: String!
  dateJoined: DateTime!
  name: String!
}
